@implements IDisposable

<div class="offcanvas offcanvas-end" data-bs-scroll="true" data-bs-backdrop="false" tabindex="-1" id="offcanvasScrolling" aria-labelledby="offcanvasScrollingLabel">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="offcanvasScrollingLabel">
            Script Queue
        </h5>

        <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        <div class="card text-center h-100">
            <div class="card-header">
                <ul class="nav nav-tabs card-header-tabs">
                    <li class="nav-item">
                        <button class="nav-link @(SelectedTab == 0 ? "active" : "")" aria-current="true" @onclick="()=>SelectedTab=  0">Running <span class="badge bg-success">@TaskDirector.Running</span></button>
                    </li>
                    <li class="nav-item">
                        <button class="nav-link @(SelectedTab == 1 ? "active" : "")" aria-current="true" @onclick="()=>SelectedTab=  1">Queued <span class="badge bg-primary">@TaskDirector.Queued</span></button>
                    </li>
                    <li class="nav-item">
                        <button class="nav-link @(SelectedTab == 2 ? "active" : "")" aria-current="true" @onclick="()=>SelectedTab=  2"><span class="oi oi-cog"></span></button>
                    </li>
                </ul>
            </div>
            <div class="card-body">
                @switch (SelectedTab)
                {
                    case 0:
                        foreach (var item in TaskDirector.RunningTasks)
                        {
                            <TaskCard Task=item.Value Status=item.Value.Status Time=item.Value.Timer.ElapsedMilliseconds></TaskCard>
                        }
                        break;
                    case 1:
                        foreach (var item in TaskDirector.QueuedTasks)
                        {
                            <TaskCard Task=item Status=DirectedTaskStatus.Queued Time=0></TaskCard>
                        }
                        break;
                    case 2:
                        <h5>Max Running Tasks</h5>
                        <PrimitiveSlider T="int" DefaultValue=TaskDirector.Capacity Min="1" Max=@Environment.ProcessorCount StepAmount="1" EnableBitShift="false" EnableIncrement="true" EnableSlider="true" EnableSliderConstraints="true" OnChange="ChangeCapacity"></PrimitiveSlider>
                        break;
                }
            </div>
        </div>
    </div>
</div>

@code {

}
