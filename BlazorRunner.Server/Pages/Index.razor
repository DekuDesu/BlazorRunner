@page "/"
@implements IDisposable

@if (SelectedAssembly != null)
{
    <div class="w-100 my-2">
        <button class="btn btn-outline-primary" @onclick="()=>SelectedAssembly=null">Back</button>
    </div>
    <div class="flex">
        @for (int i = 0; i < (ImportedTestAssembly?.Length ?? 0); i++)
        {
            <ScriptCard Script=@ImportedTestAssembly[i]></ScriptCard>
        }
    </div>
}
else
{
    IScriptAssembly[] assemblies = AssemblyDirector.GetAssemblies();
    for (int i = 0; i < (assemblies?.Length ?? 0); i++)
    {
        IScriptAssembly assembly = assemblies[i];
        <AssemblyCard Name="@assembly.Name" Description="@assembly.Description" Scripts="assembly.Scripts.Length" Settings="assembly.Settings.Length" ScriptAssembly="assembly" OnViewClick="() => { SelectedAssembly = assembly; StateHasChanged(); }"></AssemblyCard>
    }
}

<DirectorCard></DirectorCard>
<ConsoleCard></ConsoleCard>

@code{
    private static IScriptAssembly ImportedTestAssembly = null;

    public static IScriptAssembly SelectedAssembly = null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (AssemblyDirector.StartingAssembies.Length == 0)
        {
            AssemblyDirector.StartingAssembies = new System.Reflection.Assembly[]{
                    typeof(ServerTestAssembly.MyExampleScript).Assembly
                };
        }

        await AssemblyDirector.LoadStartupAssemblies();

        ImportedTestAssembly = AssemblyDirector.LoadedAssemblies.FirstOrDefault().Value;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (TaskDirector.ExecutingTasks is false)
        {
            await TaskDirector.ExecuteQueuedTasks();
        }

    }

    public void Dispose()
    {
        TaskDirector.Dispose();
    }
}